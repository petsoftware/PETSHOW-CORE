package br.com.petshow.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.codec.binary.Base64;

public class HelperBase64 {
	
	/**
	 * Transforma um aquivo em base 64 em imagem e salva em disco.
	 * @param imgBse64
	 * @param destination
	 * @throws IOException
	 */
	public static void toFile(String imgBse64, File destination) throws IOException {
		byte[] data = Base64.decodeBase64(imgBse64);
		try (OutputStream stream = new FileOutputStream(destination)) {
		    stream.write(data);
		}
	}
	/**
	 * Transforma um aquivo em base 64 em imagem e salva em disco.
	 * @param imgBse64
	 * @param filePath
	 * @throws IOException
	 */
	public static void toFile(String imgBse64, String filePath) throws IOException {
		toFile(imgBse64, new File(filePath));
	}
	/**
	 * Transforma um arquivo qualquer em base 64.
	 * @param file
	 * @return
	 */
	public static String encodeFileToBase64Binary(File file){
        String encodedfile 						= null;
        FileInputStream fileInputStreamReader 	= null;
        try {
            fileInputStreamReader = new FileInputStream(file);
            byte[] bytes = new byte[(int)file.length()];
            fileInputStreamReader.read(bytes);
            encodedfile = new String(Base64.encodeBase64(bytes), "UTF-8");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
			if(fileInputStreamReader != null){
				try {
					fileInputStreamReader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
        return encodedfile;
    }
	
	public static String img() {
		return "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";
	}

}
